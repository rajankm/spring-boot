logging.level.root=INFO
server.port= 9080
api.endpoint=http://localhost:8080/
info.description=resilience4j demo
info.version=0.0.1
management.endpoint.health.show-details=always
management.endpoints.web.exposure.include=*
management.health.circuitbreakers.enabled=true
management.health.diskspace.enabled=false
management.health.ratelimiters.enabled=false
management.metrics.distribution.percentiles-histogram.http.server.requests=true
management.metrics.distribution.percentiles-histogram.resilience4j.circuitbreaker.calls=true

resilience4j.circuitbreaker.instances.backendA.registerHealthIndicator=true
resilience4j.circuitbreaker.instances.backendA.eventConsumerBufferSize=5
resilience4j.circuitbreaker.instances.backendA.failureRateThreshold=100
resilience4j.circuitbreaker.instances.backendA.minimumNumberOfCalls=5
##STATE: HALF_OPEN; at least 3 calls needed to change from HALF_OPEN -> OPEN (if fails) or HALF_OPEN -> CLOSED (if succeeds). [IMPORTANT: 100% out 3 calls should fail in order to change from HALF_OPEN -> OPEN]
resilience4j.circuitbreaker.instances.backendA.permittedNumberOfCallsInHalfOpenState=3
resilience4j.circuitbreaker.instances.backendA.recordFailurePredicate=com.example.exception.RecordFailurePredicate
##STATE: CLOSED; {slidingWindowSize}} exceptions must be triggered in order to switch from CLOSED -> OPEN (because failureRateThreshold = 100%)
resilience4j.circuitbreaker.instances.backendA.slidingWindowSize=5
resilience4j.circuitbreaker.instances.backendA.slidingWindowType=COUNT_BASED
##STATE: OPEN; after 30seconds the state is automatically changed from OPEN -> HALF_OPEN
resilience4j.circuitbreaker.instances.backendA.waitDurationInOpenState=30s
resilience4j.circuitbreaker.instances.backendA.automaticTransitionFromOpenToHalfOpenEnabled= true


resilience4j.retry.instances.backendA.maxAttempts=3
resilience4j.retry.instances.backendA.waitDuration=10s
#resilience4j.retry.instances.backendA.enableExponentialBackoff=true
#resilience4j.retry.instances.backendA.exponentialBackoffMultiplier=2
resilience4j.retry.instances.backendA.retryException= java.io.IOException
resilience4j.retry.instances.backendA.ignoreExceptions= io.github.resilience4j.circuitbreaker.CallNotPermittedException
resilience4j.retry.instances.backendA.failAfterMaxAttempts=true

resilience4j.ratelimiter.instances.backendA.eventConsumerBufferSize=100
resilience4j.ratelimiter.instances.backendA.limitRefreshPeriod=1s
resilience4j.ratelimiter.instances.backendA.registerHealthIndicator=true
resilience4j.ratelimiter.instances.backendA.limitForPeriod=6
resilience4j.ratelimiter.instances.backendA.timeoutDuration=3s


resilience4j.timelimiter.instances.backendA.cancelRunningFuture=true
resilience4j.timelimiter.instances.backendA.timeoutDuration=5s

#resilience4j.circuitbreaker.circuit-breaker-aspect-order: 1000
#resilience4j.retry.retry-aspect-order: 100